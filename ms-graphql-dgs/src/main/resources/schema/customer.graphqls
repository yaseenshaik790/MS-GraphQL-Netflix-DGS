type Query {
    getCustomers: [Customer]
}

type Mutation {
    createCustomer(input: CustomerInput): Customer
    deleteCustomer(customerNumber: Int): CustomerResponse
    updateCustomer(customerNumber: Int, name: String): CustomerResponse
}

type CustomerResponse {
    message: String
    customerNumber: Float
}
type Customer {
    customerNumber: String!
    name: String!
    gender: String!
    contact: Int!
    mail: String
    accounts: [Account]
}

type Account {
    accountId: Float
    accountNumber: Int
    accountStatus: AccountStatus
    accountBalance: Float
}

input CustomerInput {
    name: String!
    gender: String!
    contact: Int!
    mail: String
    accounts: [AccountInput]
}

input AccountInput {
    accountNumber: Int
    accountStatus: AccountStatus
    accountBalance: Float
}

enum AccountStatus {
    Active, Inactive, Closed
}